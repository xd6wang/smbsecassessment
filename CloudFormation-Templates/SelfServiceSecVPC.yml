AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation template for temp VPC
Resources:
  rVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.50.0.0/26
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: "SelfServiceSecSecurityVPC"
      - Key: Purpose
        Value: "SMBSecurityScanningTempVPC"
  rInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: "SelfServiceSecSecurityIGW"
  rVPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref rVPC
      InternetGatewayId: !Ref rInternetGateway
  #This is a "private subnet" This is where the Instance will go
  rSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.50.0.0/28
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: "SelfServiceSec Security SubnetA"
      - Key: Reach
        Value: Private
  #This will be the "public subnet" This is where the NAT Gateway will go
  rSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.50.0.16/28
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: "SelfServiceSec Security SubnetB"
      - Key: Reach
        Value: Public
  #Gateway endpoint for S3
  rEndpointS3:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      RouteTableIds:
        - !Ref rRouteTableSelfServiceSec
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref rVPC
  rRouteTableSelfServiceSec:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: "SelfServiceSec Security RouteTable"
  rRouteTableAssociationSelfServiceSec:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref rSubnetA
      RouteTableId: !Ref rRouteTableSelfServiceSec
  rNetworkAclSelfServiceSec:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: "NACL for SelfServiceSec SubnetA"
  rSubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref rSubnetA
      NetworkAclId: !Ref rNetworkAclSelfServiceSec
  rNetworkAclEntryInSelfServiceSecAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref rNetworkAclSelfServiceSec
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  rNetworkAclEntryOutSelfServiceSecAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref rNetworkAclSelfServiceSec
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
  rNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId:
          Fn::GetAtt:
            - rEIP
            - AllocationId
        SubnetId:
           Ref: rSubnetB
        Tags:
        - Key: Name
          Value: SelfServiceSecNATGW
  #This EIP is used by the NAT Gateway
  rEIP:
    DependsOn: rVPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
       Domain: vpc
  rNATRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
          Ref: rRouteTableSelfServiceSec
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId:
          Ref: rNATGateway
  rRouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: rVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref rRouteTableSelfServiceSecPub
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref rInternetGateway
  rRouteTableSelfServiceSecPub:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: "SelfServiceSec Security Public RouteTable"
  rRouteTableAssociationSelfServiceSecPub:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref rSubnetB
      RouteTableId: !Ref rRouteTableSelfServiceSecPub
  rNetworkAclSelfServiceSecPub:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref rVPC
      Tags:
      - Key: Name
        Value: "NACL for SelfServiceSec SubnetB"
  rSubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref rSubnetB
      NetworkAclId: !Ref rNetworkAclSelfServiceSecPub
  rNetworkAclEntryInSelfServiceSecPubAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref rNetworkAclSelfServiceSecPub
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  rNetworkAclEntryOutSelfServiceSecPubAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref rNetworkAclSelfServiceSecPub
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
Outputs:
  SelfServiceSecVPCID:
    Description: 'VPC ID'
    Value: !Ref rVPC
  SubnetAID:
    Description: 'Subnet A ID'
    Value: !Ref rSubnetA
